@inject ILayoutService _layoutService
@inject ISettingsService _settingsService
@{
    var settings = await _settingsService.GetSettingsAsync();
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- Style -->
    <link rel="stylesheet" href="~/client/assets/css/layout.css" />
    @await RenderSectionAsync("Styles", false)
    <link rel="icon"
          type="image/x-icon"
          href="~/client/assets/icons/favicon.png" />
    <title>@ViewData["Title"]</title>
</head>
<body>
    <!-- Header Start -->
    <header>
        <div class="container">
            <div class="header-top">
                <!-- Logo -->
                <div class="left-side">
                    <div class="burger-menu">
                        <div class="bar"></div>
                        <div class="bar"></div>
                        <div class="bar"></div>
                    </div>
                    <a asp-controller="home" asp-action="index">
                        <h1 class="logo">Maxmod</h1>
                    </a>
                </div>
                <!-- Search -->
                <form class="search" id="search-form">
                    <input placeholder="Search For Products..." type="text" />
                    <button class="btn" type="submit">Search</button>
                </form>
                <!-- Account-Cart -->
                <div class="account-cart">
                    <!-- Account -->
                    <div class="account-container">
                        <button class="wrapper">
                            <img src="~/client/assets/icons/user_icon.svg" alt="" />
                            @if (await _layoutService.GetUserFullNameAsync() == null)
                            {
                                <span>Hello, log in</span>
                            }
                            else
                            {
                                <span>Hello, @await _layoutService.GetUserFullNameAsync()</span>
                            }
                        </button>

                        <div class="account-dropdown hidden">
                            <ul>
                                @if (User.Identity.Name == null)
                                {
                                    <li>
                                        <a asp-action="login" asp-controller="account">
                                            <img src="~/client/assets/icons/signin_icon.svg" alt="" />
                                            <span>Log In</span>
                                        </a>
                                    </li>
                                    <li>
                                        <a asp-action="register" asp-controller="account">
                                            <img src="~/client/assets/icons/signup_icon.svg" alt="" />
                                            <span>Register</span>
                                        </a>
                                    </li>
                                }
                                @if (User.Identity.Name != null)
                                {
                                    <li>
                                        <a asp-action="logout" asp-controller="account">
                                            <img src="~/client/assets/icons/signout_icon.svg"
                                                 alt="" />
                                            <span>Log Out</span>
                                        </a>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                    <!-- Cart -->
                    <div class="cart-container">
                        @await Component.InvokeAsync("Cart")
                    </div>
                </div>
            </div>
            <div class="line out-of-container"></div>
            <div class="header-bottom">
                <nav>
                    <ul class="navigation">
                        <li @((string)ViewData["Title"]! == "Home" ? "class=active" : "")>
                            <a asp-controller="home" asp-action="index">Home</a>
                        </li>
                        <li class="categories">
                            <a href="#">
                                Categories
                                <img src="~/client/assets/icons/chevron.svg" alt="" />
                            </a>
                            <div class="nav-dropdown hidden">
                                @*Header Category Component *@
                                @await Component.InvokeAsync("HeaderCategory")
                                <div class="line"></div>
                            </div>
                        </li>
                        <li @((string)ViewData["Title"]! == "About Us" ? "class=active" : "")>
                            <a asp-controller="about" asp-action="index">About Us</a>
                        </li>
                        <li @((string)ViewData["Title"]! == "Contact" ? "class=active" : "")>
                            <a asp-controller="contact" asp-action="index">Contact</a>
                        </li>
                        @if (User.IsInRole("Admin") || User.IsInRole("Vendor"))
                        {
                            <li>
                                <a asp-controller="dashboard" asp-action="index" asp-area="admin">Dashboard</a>
                            </li>
                        }
                    </ul>
                </nav>
            </div>
            <div class="line out-of-container"></div>
        </div>
    </header>
    <main>
        @RenderBody()
    </main>
    <!-- Footer Start -->
    <footer>
        <div class="container">
            <nav>
                <ul>
                    <li>
                        <h3>Contact Info</h3>
                        <ul>
                            <li>
                                <img src="~/client/assets/icons/footer_location.svg" alt="" />
                                <p>@settings.Address</p>
                            </li>
                            <li>
                                <img src="~/client/assets/icons/footer_phone.svg" alt="" />
                                <p>@settings.Phone</p>
                            </li>
                            <li>
                                <img src="~/client/assets/icons/footer_mail.svg" alt="asd" />
                                <p>@settings.Email</p>
                            </li>
                        </ul>
                    </li>
                    <li>
                        <h3>Navigation</h3>
                        <ul>
                            <li>
                                <a asp-controller="home" asp-action="index"> Home </a>
                            </li>
                            <li>
                                <a href="#"> Shop </a>
                            </li>
                            <li>
                                <a asp-controller="about" asp-action="index"> About Us </a>
                            </li>
                            <li>
                                <a asp-controller="contact" asp-action="index"> Contact </a>
                            </li>
                        </ul>
                    </li>
                    <li>
                        <h3>Categories</h3>
                        @* Footer Category Component *@
                        @await Component.InvokeAsync("FooterCategory")
                    </li>
                </ul>
            </nav>
            <div class="line out-of-container"></div>
            <span class="copyright">@@ 2024 All rights reserved.</span>
        </div>
        <button style="
          background: linear-gradient(
            to top,
            rgb(0, 0, 0) 0%,
            rgb(255, 255, 255) 0%
          );
        "
                class="back-to-top">
            <img src="~/client/assets/icons/chevron.svg" alt="" />
        </button>
    </footer>
    <!-- Scripts -->
    <script src="~/client/assets/js/layout.js"></script>
    <script>
        const refreshLayoutCart = async () => {
            const response = await fetch('@Url.Action("GetLayoutCart", "Cart")');
            const data = await response.text();
            document.querySelector('.cart-container').innerHTML = data;
            document.body.style = ""
            bindLayoutCartEventListeners();
        };

        const bindLayoutCartEventListeners = () => {
            const headerCartEl = document.querySelector(".header-cart");
            const cartDrawerEl = document.querySelector(".cart-container .cart-drawer");
            const cartOverlayEl = document.querySelector(".cart-container .overlay");
            const cartDrawerCloseBtn = document.querySelector(
                ".cart-container .drawer-top button"
            );

            // Open drawer on cart click
            headerCartEl.addEventListener("click", () => {
                cartDrawerEl.classList.remove("hidden");
                cartOverlayEl.classList.remove("hidden");
                document.body.style.overflow = "hidden";
            });

            // Close drawer
            [cartDrawerCloseBtn, cartOverlayEl].forEach((element) => {
                element.addEventListener("click", () => {
                    cartDrawerEl.classList.add("hidden");
                    cartOverlayEl.classList.add("hidden");
                    document.body.style.overflow = "";
                });
            });

            //Cart functionallity
            const removeItemBtns = document.querySelectorAll("#cart-remove");
            const products = document.querySelectorAll(".drawer-middle .product");

            products.forEach(product => {
                const increaseBtn = product.querySelector("#increase-btn");
                const decreaseBtn = product.querySelector("#decrease-btn");
                const countInput = product.querySelector("#count-input");

                countInput.addEventListener("keypress", () => event.preventDefault());
                increaseBtn.addEventListener("click", async () => {
                    await fetch(`@Url.Action("AddToCart", "Cart")/?id=${increaseBtn.dataset.id}&quantity=1`, { method: "POST" });
                    await refreshLayoutCart();
                    if ('@(ViewData["Title"])' == "Cart") await refreshCart();

                });
                decreaseBtn.addEventListener("click", async () => {
                    if (countInput.value > 1) {
                        await fetch(`@Url.Action("AddToCart", "Cart")/?id=${decreaseBtn.dataset.id}&quantity=-1`, { method: "POST" });
                        await refreshLayoutCart();
                        if ('@(ViewData["Title"])' == "Cart") await refreshCart();
                    }
                });
            });

            removeItemBtns.forEach(btn => btn.addEventListener("click", async () => {
                await fetch(`@Url.Action("RemoveFromCart", "Cart")/${btn.dataset.id}`, { method: "POST" });
                await refreshLayoutCart();
                if ('@(ViewData["Title"])' == "Cart") await refreshCart();
            }));
        };

        document.addEventListener('DOMContentLoaded', bindLayoutCartEventListeners);
    </script>
    @await RenderSectionAsync("Scripts", false)
</body>
</html>

